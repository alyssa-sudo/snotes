#!/bin/sh
# Take and organize school markdown notes

# Name of the executable
name=${0##*/}

# If these variables are set, use them, otherwise use the default location
[ "$SNOTES_BASE" ] || {
	# If `xdg-user-dir` use it to determien the location of the documents directory
	# Otherwise, use `$HOME/Documents`
	command -v xdg-user-dir > /dev/null \
		&& documents=$(xdg-user-dir DOCUMENTS) \
		|| documents="$HOME/Documents"

	SNOTES_BASE="$documents/school"
}

# Usage Statement
usage() {
	while read -r line
	do printf '%b\n' "$line"
	done <<-USAGE
	usage: $name [OPTIONS] -p <PERIOD> -t <TYPE> [-- FILENAME]

	options:
	-h	display this message
	-p	specify the period
	-t	specify the note type

	If a filename is not specified, the current date (\`date +%F\`) will used.
	Export \`SNOTES_BASE\` to determine the location of notes
	USAGE

	exit "${1:-1}"
}

# Print messages to stderr in a specially formatted way
# Exit immediately if `f` is passed
msg() {
	[ "$1" = f ] && { fatal=1; shift; }
	printf '%b\n' "$name: $*" 1>&2
	[ "$fatal" ] && exit 1
}

# Check for a text editor or use nano
if [ "$VISUAL" ] && command -v "$VISUAL" > /dev/null
then texteditor="$VISUAL"
elif [ "$EDITOR" ] && command -v "$EDITOR" > /dev/null
then texteditor="$EDITOR"
else
	msg "\$VISUAL and \$EDITOR are unset... defaulting to nano"
	texteditor="nano"
fi

# Argument handling (could also use getopts I suppose...)
# Yes, this is pretty complicated for this script, but will leave room for extensions in the future
while [ "$*" ]
do
	case $1 in
		-  ) shift; continue ;;          # Empty flag, Do Nothing
		-- ) shift; break ;;             # Stop processing arguments
		-* ) flag=${1#-}; shift ;;       # Remove leading `-` from flag and process
		*  ) larg=$1; shift; continue ;; # Option arguments (<PERIOD>, <TYPE>, etc)
	esac

	# Break the flag into arguments and do setup
	while [ "$flag" ]
	do
		arg=${flag%${flag#?}}

		case $arg in
			h ) usage 0 ;;
			p ) period=$1; shift ;;
			t ) type=$1; shift ;;
			* ) msg f "-$arg: invalid argument" ;;
		esac

		flag=${flag#?}
	done
done

# If period and type aren't set, exit immediately
if [ -z "$class" ] || [ -z "$type" ]
then
	msg "class or type was not specified"
	usage 1
fi

# If `$1` is not empty, set it as the filename suffixed with `.md`
# Otherwise, set the filename to `$(date +%F).md`
if [ "$1" ]
then filename=$1.md
elif [ "$larg" ]
then filename=$larg.md
else filename=$(date +%F).md
fi

mkdir -p "$SNOTES_BASE/$class/$type" || exit 1

$texteditor "$SNOTES_BASE/$class/$type/$filename" || {
	msg "an error occured"
}
